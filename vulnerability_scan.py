#!/usr/bin/python

import subprocess
import SoftLayer
import os
import sys, getopt
import time
import swiftclient
from time import strftime as date
from BeautifulSoup import BeautifulSoup



class vulnerability_scan():
    # To read command line orguments and provide help page.
    def __init__(self, argv):
        # SL Object Storage details.
        self.obj_storage_name = "SLOS552583-3"
        self.obj_storage_loc1 = "dal05"
        self.obj_storage_loc2 = "ams01"
        self.obj_container = "vulnerability_reports"
        help_msg = "Syntax : vulnerability_scan.py -u <Auth User> -k <Auth Key> -U <Obj Storage Auth User> -K <Obj Storage Auth Key> -e <Email list> \nHelp : vulnerability_scan.py -h"

        try:
            opts, args = getopt.getopt(argv, "hu:k:U:K:e:",
                                       ["auth_user=", "auth_key=", "obj_auth_user=", "obj_auth_key=", "recipients="])
            if (len(argv) != 1 and len(argv) < 10) or (len(argv) > 10):
                print '- [Command orgument exception. Please follow below syntax or -h option for help.]'
                print help_msg
                sys.exit(2)
        except getopt.GetoptError:
            print '- [Incorrect Command. Please follow below syntax or -h option for help.]'
            print help_msg
            sys.exit(2)

        for opt, arg in opts:
            if opt == '-h' or arg == '-h':
                print "Command Help:"
                print help_msg
                sys.exit()
            elif opt in ("-u", "--auth_user"):
                self.auth_user = arg
            elif opt in ("-k", "--auth_key"):
                self.auth_key = arg
            elif opt in ("-U", "--obj_auth_user"):
                self.obj_auth_user = arg
            elif opt in ("-K", "--obj_auth_key"):
                self.obj_auth_key = arg
            elif opt in ("-e", "--recipients"):
                self.recipients = arg
        # API username and API Key.

        self.client = SoftLayer.Client(username=self.auth_user, api_key=self.auth_key)
        try:
            self.account = self.client['Account'].getObject()
        except Exception, e:
            print "- [Below softlayer exception occured.]\n%s" % e
            sys.exit()


            # This method runs vulnerability scan

    def run_vuln_scan(self):
        account_id = self.account['id']
        vm_backend_ip = ''
        vm_id = ''
        vulnerable_vms = ''
        vms = self.client['Account'].getVirtualGuests()
        fqdn = ''
        for each in vms:
            fqdn = each['fullyQualifiedDomainName']
            print "- [Preparing for vulnerability scan on device %s.]" % fqdn
            try:
                if each['primaryBackendIpAddress']:
                    vm_backend_ip = each['primaryBackendIpAddress']
                    vm_id = each['id']
            except:
                print "- [vulnerability scan script failed on device %s with below error.]\n%s" % (fqdn, e)

            scan_client = self.client['Network_Security_Scanner_Request']
            scan_template = {
                "accountId": account_id,
                "ipAddress": vm_backend_ip,
                "guestId": vm_id
            }
            try:
                scanner = scan_client.createObject(scan_template)
                scan_id = scanner['id']
                print "- [vulnerability scan started on device %s. Scan ID: %d]" % (fqdn, scan_id)

                # Calling method to verify Scan status and Generate report
                vulnerable = self.get_vuln_scan_report(scan_id, fqdn)
                if vulnerable:
                    vulnerable_vms = "%s\n%s : %s" % (vulnerable_vms, vulnerable, str(vm_backend_ip))
                print "Vul Vms : \n%s " % vulnerable_vms
            except Exception, e:
                print "- [vulnerability scan failed on device %s with below error.]\n%s" % (fqdn, e)
        if vulnerable_vms:
            # Send mails to report this failure
            print "- [Sending notification to Account User regarding the Vulnerability Failure.]"
            subject = 'Vulnerability scan failed'
            body = """
Vulnerability scan has been run on your Softlayer account and following servers are found Vulnerable.
%s\n
Please take necessary actions to resove the vulnerabilties listed in Vulnerability report.\n
Vulnerability report can be found in Softlayer Portal. Follow below steps to download/view Vulnerability report.\n
1) Login to https://control.softlayer.com/security/vscans\n
2) Click on 'Scan Complete' button located in right side of your server.\n
3) Report will be opened on new page.\n
""" % vulnerable_vms
            print self.send_mail(subject, body)

            # Verify Scan result and generate report.

    def get_vuln_scan_report(self, scan_id, fqdn):
        scan_client = self.client['Network_Security_Scanner_Request']
        while True:
            scan_status = scan_client.getStatus(id=scan_id)
            print "- [Scan In Progress for device %s, Dont close terminal or press 'ctrl c' else Scan Report wont be generated.]" % fqdn
            if scan_status['id'] == 103:
                print "- [Scan completed. Generating scan report for device %s.]" % fqdn
                scan_report_data = scan_client.getReport(id=scan_id)
                print "- [Scan report generated.]"
                # Uploading report on Loca 1
                self.upload_report(fqdn, scan_report_data, self.obj_storage_loc1)
                # Uploading report on Loca 2
                self.upload_report(fqdn, scan_report_data, self.obj_storage_loc2)
                print "- [Validating vulnerability for device %s.]" % fqdn
                return self.check_vulnerability(fqdn, scan_report_data)
            time.sleep(50)

    # Parse Vulnerability scan report (HTML) to Validate a system is Vulnerable or Not
    def check_vulnerability(self, fqdn, scan_report_data):
        parsed_data = BeautifulSoup(scan_report_data)
        parsed_data = parsed_data.find('body')('table')[3]
        report_data = parsed_data('td')

        if 'security holes' in report_data[3].text and int(report_data[4].text) == 0 and 'security warnings' in \
                report_data[5].text and int(report_data[6].text) == 0:
            print '- [Vulnerability Scan Passed for device %s: Following are scan stats.]' % fqdn
            print "- [%s : %s]" % (report_data[3].text, report_data[4].text)
            print "- [%s : %s]" % (report_data[5].text, report_data[6].text)
        else:
            print '- [Vulnerability Scan Failed for device %s: Following are scan stats.]' % fqdn
            print "- [%s : %s]" % (report_data[3].text, report_data[4].text)
            print "- [%s : %s]" % (report_data[5].text, report_data[6].text)
            return fqdn

    # Send mails
    def send_mail(self, subject, body):
        import smtplib
        from email.mime.multipart import MIMEMultipart
        from email.mime.text import MIMEText
        recipients = self.recipients.replace(" ", "")
        recipients = recipients.split(",")
        print "Recipients : %s" % recipients
        # Record the MIME types of both parts - text/plain and text/html.
        part1 = MIMEText(body, 'plain')
        sender = "vulnerability_scan_tools@cloudmatrix.com"
        msg = MIMEMultipart('alternative')
        msg['Subject'] = subject
        msg.attach(part1)
        try:
            smtpObj = smtplib.SMTP('localhost')
            smtpObj.sendmail(sender, recipients, msg.as_string())
            smtpObj.quit()
            return "True"
        except:
            return "False"

    # Uploading Report in SL Object storage.
    def upload_report(self, fqdn, scan_report_data, obj_storage_loc):
        report_ts = date('%Y%m%d-%H%M%S')
        scan_report_filename = "%s_vulnerability_report_%s.html" % (fqdn, report_ts)
        print "- [Uploading the scan report %s to Object Storage %s in container %s at location %s]" % (
        scan_report_filename, self.obj_storage_name, self.obj_container, obj_storage_loc)
        obj_storage_url = "https://%s.objectstorage.softlayer.net/auth/v1.0" % obj_storage_loc
        try:
            conn = swiftclient.Connection(
                user="%s:%s" % (self.obj_storage_name, self.obj_auth_user),
                key=self.obj_auth_key,
                authurl=obj_storage_url,
            )
            # Creating SL Obj Storage container if not already created.
            conn.put_container(self.obj_container)
            # Uploading report
            conn.put_object(self.obj_container, scan_report_filename, contents=scan_report_data,
                            content_type='text/plain')
            print "- [Scan report uploaded successfully.]"
        except Exception, e:
            print "- [Scan report upload failed with below error.]\n %s" % e


# Calling of all methods.
if __name__ == "__main__":
    obj = vulnerability_scan(sys.argv[1:])
    obj.run_vuln_scan()
